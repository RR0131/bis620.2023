summary(m1)
## Load the data
install.packages("carData")
library(carData)
data(Leinhardt)
#use na.omit to remove the missing data
leinhardt <- na.omit(Leinhardt)
summary(leinhardt)
# MLR of imcome+ oil exporting on infant mortality
m1 <-lm(infant ~ income + oil, leinhardt)
summary(m1)
#Plot the diagnosis plots
library(ggfortify)
install.packages("carData")
## Load the data
#install.packages("carData")
library(carData)
data(Leinhardt)
#use na.omit to remove the missing data
leinhardt <- na.omit(Leinhardt)
summary(leinhardt)
# MLR of imcome+ oil exporting on infant mortality
m1 <-lm(infant ~ income + oil, leinhardt)
summary(m1)
#Plot the diagnosis plots
library(ggfortify)
#Plot the diagnosis plots
install.packages("ggfortify")
library(ggfortify)
library(ggplot2)
library(lmtest)
#Plot the diagnosis plots
#install.packages("ggfortify")
install.packages("lmtest")
library(ggfortify)
library(ggplot2)
library(lmtest)
autoplot(m1, which = 1:2)
autoplot(m1, which = 3:4)
autoplot(m1, which = 5:6)
plot( residuals(m1), ylab="Residuals")
abline(h=0, col="red")
plot(residuals (m1)[-length(residuals(m1))] , residuals (m1)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
dwtest (infant ~ income + oil, data=leinhardt)
ggplot(leinhardt,aes(x=infant))+ geom_histogram() +
ggtitle("Histogram of infant") + theme(plot.title = element_text(hjust = 0.5))
ggplot(leinhardt,aes(x=log(infant)))+ geom_histogram() +
ggtitle("Histogram of log(infant)") + theme(plot.title = element_text(hjust = 0.5))
#transformation of infant
leinhardt$log_infant <- log(leinhardt$infant)
m2 <-lm(log_infant ~ income + oil, leinhardt)
summary(m2)
#weighted least squares
wts <- 1/(fitted(m2))^2
m3 <-lm( log_infant ~ income + oil, leinhardt, weights = wts)
summary(m3)
autoplot(m3, which = 1:6)
ggplot(leinhardt,aes(x=income))+ geom_histogram() +
ggtitle("Histogram of income") + theme(plot.title = element_text(hjust = 0.5))
ggplot(leinhardt,aes(x=log(income)))+ geom_histogram() +
ggtitle("Histogram of log(income)") + theme(plot.title = element_text(hjust = 0.5))
#Transformation of infant and income
leinhardt$log_income <- log(leinhardt$income)
m4 <-lm(log_infant ~ log_income + oil, leinhardt)
summary(m4)
autoplot(m4, which = 1:6)
plot( residuals(m4), ylab="Residuals")
abline(h=0, col="red")
plot(residuals (m4)[-length(residuals(m4))] , residuals (m4)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
dwtest (log_infant ~ log_income + oil, data=leinhardt)
high_leverage<-rownames(leinhardt)[hatvalues(m4) > 0.089]
high_leverage
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya", "Papua.New.Guinea")]
View(leinhardt)
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya", "Papua.New.Guinea"),]
m5 <-lm(log_infant ~ log_income + oil, leinhardt_new)
summary(m5)
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
install.packages("faraway")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("faraway")
library(faraway)
data(fpe)
?fpe
head(fpe)
dim(fpe)
# proportional weights
lm (A2 ~ A + B + C + D + E + F + G + H + J + K + N -1, fpe, weights=1/EI)$coef
# proportional weights
lm (A2 ~ A + B + C + D + E + F + G + H + J + K + N -1, fpe, weights=53/EI)$coef
# no weights
lm (A2 ~ A + B + C + D + E + F + G + H + J + K + N -1, fpe)$coef
# other weights?
lm (A2 ~ A + B + C + D + E + F + G + H + J + K + N -1, fpe, weights=A2^2)$coef
lm (A2 ~ A + B + C + D + E + F + G + H + J + K + N -1, fpe, weights=C)$coef
# Simulation
set.seed(1234)
x <- 1:100
epsilon <- 25*arima.sim(model=list(ar=0.7),n=100)
y <- 1 + 2*x + epsilon
g2 <- lm( y ~ x )
plot ( residuals(g2), ylab="Residuals")
plot (residuals (g2)[-100] , residuals (g2)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
library(lmtest)
?dwtest
dwtest (y~x) # can be MLR
data (airquality)
?airquality
head(airquality)
airquality_data <- na.omit(airquality)
g3<- lm (Ozone ~ Solar.R + Wind + Temp, airquality_data)
summary (g3)
plot (fitted (g3), residuals (g3), xlab="Fitted", ylab="Residuals")
#hist(airquality_data$Ozone) # right-skewed
#hist(log(airquality_data$Ozone))
gl <- lm(log(Ozone) ~ Solar.R + Wind + Temp, airquality_data)
plot (fitted (gl), residuals (gl), xlab="Fitted", ylab="Residuals")
plot (residuals (gl), ylab="Residuals")
abline(h=0)
length(residuals(gl))
plot (residuals (gl)[-111] , residuals (gl)[-1] ,
xlab= expression (e [i]) , ylab=expression (e [i + 1]))
summary(lm(residuals(gl)[-1]~ -1+residuals(gl)[-111]))
library(lmtest)
#If p val < 0.05, then there are correlations between the residuals
dwtest (log(Ozone) ~Solar.R + Wind + Temp, data= airquality_data)
autoplot(m2, which = 1:6)
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya",)] #"Papua.New.Guinea")
high_leverage<-rownames(leinhardt)[hatvalues(m4) > 0.089]
high_leverage
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya",)] #"Papua.New.Guinea")
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya",,)] #"Papua.New.Guinea")
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya"),] #"Papua.New.Guinea")
m5 <-lm(log_infant ~ log_income + oil, leinhardt_new)
summary(m5)
#log transform of infant and use weighted least square
leinhardt$log_infant <- log(leinhardt$infant)
wts <- 1/(fitted(m2))^2
m2 <-lm( log_infant ~ income + oil, leinhardt, weights = wts)
summary(m2)
autoplot(m2, which = 1:6)
ggplot(leinhardt,aes(x=income))+ geom_histogram() +
ggtitle("Histogram of income") + theme(plot.title = element_text(hjust = 0.5))
ggplot(leinhardt,aes(x=log(income)))+ geom_histogram() +
ggtitle("Histogram of log(income)") + theme(plot.title = element_text(hjust = 0.5))
#Refit the model by transforming both income and infant
leinhardt$log_income <- log(leinhardt$income)
m3 <-lm(log_infant ~ log_income + oil, leinhardt)
summary(m3)
autoplot(m3, which = 1:6)
plot( residuals(m4), ylab="Residuals")
abline(h=0, col="red")
plot( residuals(m3), ylab="Residuals")
abline(h=0, col="red")
plot(residuals (m3)[-length(residuals(m3))] , residuals (m3)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
dwtest (log_infant ~ log_income + oil, data=leinhardt)
autoplot(m3, which = 1:6)
## Load the data
#install.packages("carData")
library(carData)
data(Leinhardt)
#use na.omit to remove the missing data
leinhardt <- na.omit(Leinhardt)
summary(leinhardt)
# MLR of imcome+ oil exporting on infant mortality
m1 <-lm(infant ~ income + oil, leinhardt)
summary(m1)
#Plot the diagnosis plots
#install.packages("ggfortify")
#install.packages("lmtest")
library(ggfortify)
library(ggplot2)
library(lmtest)
autoplot(m1, which = 1:2)
autoplot(m1, which = 3:4)
autoplot(m1, which = 5:6)
plot(residuals(m1), ylab="Residuals")
abline(h=0, col="red")
plot(residuals (m1)[-length(residuals(m1))] , residuals (m1)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
#Durbin- Watson test
dwtest (infant ~ income + oil, data=leinhardt)
ggplot(leinhardt,aes(x=infant))+ geom_histogram() +
ggtitle("Histogram of infant") + theme(plot.title = element_text(hjust = 0.5))
ggplot(leinhardt,aes(x=log(infant)))+ geom_histogram() +
ggtitle("Histogram of log(infant)") + theme(plot.title = element_text(hjust = 0.5))
#log transform of infant and use weighted least square
leinhardt$log_infant <- log(leinhardt$infant)
wts <- 1/(fitted(m2))^2
#log transform of infant and use weighted least square
leinhardt$log_infant <- log(leinhardt$infant)
m2 <-lm(log_infant ~ income + oil, Leinhardt_data)
#log transform of infant and use weighted least square
leinhardt$log_infant <- log(leinhardt$infant)
m2 <-lm(log_infant ~ income + oil, leinhardt)
wts <- 1/(fitted(m2))^2
m3 <-lm( log_infant ~ income + oil, leinhardt, weights = wts)
summary(m3)
autoplot(m3, which = 1:6)
ggplot(leinhardt,aes(x=income))+ geom_histogram() +
ggtitle("Histogram of income") + theme(plot.title = element_text(hjust = 0.5))
ggplot(leinhardt,aes(x=log(income)))+ geom_histogram() +
ggtitle("Histogram of log(income)") + theme(plot.title = element_text(hjust = 0.5))
#Refit the model by transforming both income and infant
leinhardt$log_income <- log(leinhardt$income)
m4 <-lm(log_infant ~ log_income + oil, leinhardt)
summary(m4)
autoplot(m4, which = 1:6)
plot( residuals(m4), ylab="Residuals")
abline(h=0, col="red")
plot(residuals (m3)[-length(residuals(m3))] , residuals (m4)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
dwtest (log_infant ~ log_income + oil, data=leinhardt)
plot(residuals (m4)[-length(residuals(m3))] , residuals (m4)[-1] ,
xlab= expression (e [i]) , ylab=expression (e[i + 1]))
autoplot(m4, which = 1:6)
#Refit the model by transforming both income and infant
leinhardt$log_income <- log(leinhardt$income)
m4 <-lm(log_infant ~ log_income + oil, leinhardt)
summary(m4)
autoplot(m4, which = 1:6)
high_leverage<-rownames(leinhardt)[hatvalues(m4) > 0.089]
high_leverage
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Iraq","Saudi.Arabia","Libya"),] #"Papua.New.Guinea")
m5 <-lm(log_infant ~ log_income + oil, leinhardt_new)
summary(m5)
ggplot(leinhardt,aes(x=log(infant)))+ geom_histogram() +
ggtitle("Histogram of log_infant") + theme(plot.title = element_text(hjust = 0.5))
high_cook<-rownames(leinhardt)[hatvalues(m4) > 0.5]
high_cook<-rownames(leinhardt)[hatvalues(m4) > 0.5]
high_cook
View(leinhardt)
View(leinhardt)
high_cook<-rownames(leinhardt)[cooks.distance(m4) > 0.5]
high_cook
big_lev = 3(2+1)/101
big_lev <- 3(2+1)/101
1=3
a=3
a
big_lev = 3*(2+1)/101
high_leverage<-rownames(leinhardt)[hatvalues(m4) > big_lev]
high_leverage
high_cook_con <-rownames(leinhardt)[cooks.distance(m4) > 0.5]
high_cook_con
big_cook_con <-rownames(leinhardt)[cooks.distance(m4) > 0.5]
big_cook_con
leinhardt_new <- leinhardt[!rownames(leinhardt) %in% c("Saudi.Arabia","Libya"),]
m5 <-lm(log_infant ~ log_income + oil, leinhardt_new)
summary(m5)
library(devtools)
document()
data(accel)
accel
library(ggplot2)
accel |> head(1000) |> pivot_longer(-time)
library(tidyr)
accel |> head(1000) |> pivot_longer(-time)
accel |> head(1000)|> pivot_longer(-time, values_to = "Acceleration", names_to = "Channel") |> ggplot(aes(x= time, y = Acceleration)) +geom_line() + facet_grid(Channel~.)
?plot_accel
x<- accel(head(1000))
x <- accel |> head(1000)
document
spectral_signature(x)
.x = x[[2]]
fft(.x, inverse = inverse) |> Mod() |> head(300) |> plot()
ret = ret[seq_len(ceiling(nrow(ret)/2)), ]
spectral_signature(x)
fft(.x, inverse = inverse) |> Mod() |> head(100) |> plot()
.x = x [[2]]
fft(.x, inverse = inverse) |> Mod() |> head(100) |> plot()
ret = map_dfc(
x |> select(X, Y, Z),
~ fft(.x, inverse = inverse) |> Mod()
)
map_dfc(
+     x |> select(X, Y, Z),
+     ~ fft(.x, inverse = inverse) |> Mod()
+ )
map_dfc(
x |> select(X, Y, Z),
~ fft(.x, inverse = inverse) |> Mod()
)
document()
spectral_signature(x)
document()
spectral_signature(x)
q
spectral_signature(x)
document
spectral_signature(x) |> plot_accel(x_var = 'freq')
document()
spectral_signature(x) |> plot_accel(x_var = 'freq')
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
spectral_signature(x) |> plot_accel(x_var = 'freq')
document()
spectral_signature(x) |> plot_accel(x_var = 'freq')
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
x_var
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x= !!x_var, y = Acceleration)) +
geom_line() +
facet_grid(Channel~.)
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x= freq, y = Acceleration)) +
geom_line() +
facet_grid(Channel~.)
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x= !!as.symbol(freq), y = Acceleration)) +
geom_line() +
facet_grid(Channel~.)
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes_string(x= x_var, y = "Acceleration")) +
geom_line() +
facet_grid(Channel~.)
documet()
spectral_signature(x, take_log = TRUE) |> filter (freq <25) |> plot_accel(x_var = "freq")
library(dplyr)
x|>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes_string(x= x_var, y = "Acceleration")) +
#ggplot(aes(x = !!as.symbol(x_var), y = Acceleration)) +
geom_line() +
facet_grid(Channel~.)
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
library(usethis)
document()
check()
covr::report()
library(usethis)
use_vignette("spectral_signatures")
library(bis620.2023)
install()
library(bis620.2023)
library(lubridate)
library(bis620.2023)
install.packages("lubridate")
library(lubridate)
dara(accel)
library(bis620.2023)
#install.packages("lubridate")
library(lubridate)
data(accel)
t1= accel$time[50000]
accel|>
filter(time> t1 & time <= t1 +min(5)) |> spec_sig()
library(bis620.2023)
#install.packages("lubridate")
library(lubridate)
data(accel)
t1= accel$time[50000]
accel|>
filter(time> t1 & time <= t1 +min(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq")
library(bis620.2023)
#install.packages("lubridate")
library(lubridate)
data(accel)
t1= accel$time[50000]
accel|>
filter(accel$time > t1 & accel$time <= t1 +min(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
document()
check()
document()
check()
library(testthat)
library(usethis)
use_test("spec-sig")
library(devtools)
document()
accel |> head() |> spec_sig()
test()
library(covr)
report()
use_test("plot_accel")
accel |> head(100) |> plot_accel
data(accel)
accel |> head(100) |> plot_accel()
test()
test()
install.packages("vdiffr")
library(vdiffr)
test()
document()
test()
test()
testthat::snapshot_review('plot_accel/')
install.packages("diffviewer")
testthat::snapshot_review('plot_accel/')
library(diffviewer)
testthat::snapshot_review('plot_accel/')
testthat::snapshot_review('plot_accel/')
testthat::snapshot_review('plot-accel/')
testthat::snapshot_review('plot_accel/')
testthat::snapshot_review('plot_accel/')
test()
testthat::snapshot_review('plot_accel/')
usethis::use_readme_rmd()
library(usethis)
getwd()
use_github_action_check_standard()
document()
library(usethis)
document()
library(testthat)
document()
document()
library(roxygen2)
document
document()
install.packages("roxygen2")
library(roxygen2)
document()
library(devtools)
document()
check（）
check()
testthat::snapshot_review('plot-accel/')
test()
library(pkgdown)
build_site_github_pages()
build_site_github_pages()
build_site_github_pages()
fit = summary(lm(Sepal.length ~Sepal.Width, data = iris))
data("iris")
fit = summary(lm(Sepal.length ~Sepal.Width, data = iris))
fit = summary(lm(Sepal.Length ~Sepal.Width, data = iris))
fit
class(fit)
unclass(fit)
class(unclass(fit))
names(fit)
fit$r.squared
class(fit)= c("my.r.squared", class(fit))
class(fit)
print(fit)
print.my.r.squared = function(x, ...) {paste("The r-squared value is:", fit$r.squared)}
print(fit)
print(a)
document()
plot.spec_sig = function(x, y, ...) {
x|>
pivot_longer(-freq, values_to = "Acceleration", names_to = "Channel") |>
#ggplot(aes_string(x= x_var, y = "Acceleration")) +
ggplot(aes(x = freq, y = Acceleration)) +
geom_line() +
facet_grid(Channel~.)
}
accel |> head(1000) |> spec_sig() |> plot()
document()
load_all()
bis620.2023::run()
runApp('~/Desktop/Fall2023/620/hw/hw3/SC-APP-1.R')
runApp('~/Desktop/Fall2023/620/classcode/0927/SC-APP.R')
source("~/Desktop/Fall2023/620/classcode/0927/SC-SOURCE.R", echo=TRUE)
runApp('~/Desktop/Fall2023/620/classcode/0927/SC-APP.R')
library(devtools)
library(covr)
report()
setwd("~/Desktop/Fall2023/620/classcode/1016/bis620.2023/inst/App")
con = dbConnect(
duckdb(
file.path("..","..","..","..", "0927", "ctgov.duckdb"),
read_only = TRUE
)
)
library(dplyr)
library(duckdb)
library(DBI)
library(DT)
library(ggplot2)
library(tidyr)
library(purrr)
con = dbConnect(
duckdb(
file.path("..","..","..","..", "0927", "ctgov.duckdb"),
read_only = TRUE
)
)
document()
document()
load_all()
bis620.2023::run()
